# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [adf_publish]
  pull_request:
    branches: []

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: 'APIM resource group name'
        required: true
      dataFactoryName:
        description: 'APIM name'
        required: true
      armTemplateFile:
        description: 'ARM template file name'
        required: false
      armTemplateParametersFile:
        description: 'ARM template parameters file name'
        required: false
      additionalParameters:
        description: 'Parameters which will be replaced in the ARM template'
        required: false
        default: ''
      skipAzModuleInstallation:
        description: 'Parameters which skip the Az module installation'
        required: false
        default: 'false'
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Install Az PowerShell module
        run: if('${{ inputs.skipAzModuleInstallation }}' -ne 'true') { Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -AllowClobber -Force}
        shell: pwsh
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: colourapi_swagger
          path: colourapi_swagger

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
          environment: azurecloud
          
#       - name: Install Az DataFactory module
#         run: Install-Module -Name Az.DataFactory -RequiredVersion 1.16.8 -AllowClobber -Force
#         shell: pwsh
        
      - name: Connect-AzAccount
        run: | 
          $azureAplicationId ="${{ secrets.CLIENT_ID }}"
          $azureTenantId= "${{ secrets.TENANT_ID }}"
          $azurePassword = ConvertTo-SecureString "${{ secrets.CLIENT_SECRET }}" -AsPlainText -Force
          $psCred = New-Object System.Management.Automation.PSCredential($azureAplicationId , $azurePassword)
          Connect-AzAccount -Credential $psCred -TenantId $azureTenantId  -ServicePrincipal

      - name: set az context
        run: Set-AzContext -SubscriptionName "${{ secrets.SUBSCRIPTION_ID }}"
        shell: pwsh  
        
      - name: Run ARM deploy
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.resourceGroupName }}
          template: ${{ inputs.armTemplateFile }}
          parameters: ${{ inputs.armTemplateParametersFile }}
